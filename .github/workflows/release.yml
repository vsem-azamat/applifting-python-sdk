name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write
  packages: write

env:
  BASE_URL: https://python.exercise.applifting.cz
  APPLIFTING_REFRESH_TOKEN: ${{ secrets.APPLIFTING_REFRESH_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run tests
        run: uv run pytest tests/ -v

  build-and-publish:
    runs-on: ubuntu-latest
    needs: test
    environment: release

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Verify tag matches version
        id: verify-version
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          TAG_VERSION="${TAG#v}"
          PKG_VERSION=$(grep -Po '(?<=^version = \")[^\"]+' pyproject.toml)
          echo "Tag version: $TAG_VERSION"
          echo "pyproject version: $PKG_VERSION"
          if [ "$TAG_VERSION" != "$PKG_VERSION" ]; then
            echo "::error::Tag version ($TAG_VERSION) does not match pyproject version ($PKG_VERSION)"
            exit 1
          fi

      - name: Build package
        run: uv build

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          packages-dir: dist
          skip-existing: true
